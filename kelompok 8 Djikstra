#Mengimport permutation dari itertools
from itertools import permutations

#Membuat class bernama WeightGraph dan membuat atribut kosong bernama citylist.
class WeightedGraph:
    #initialization
    def _init_(self):
        self.cityList = {}

#Membuat fungsi printgraph. untuk city di citylist memprint citi ":" dan isi city di citylist
    def printGraph(self):
        #mengiterasi setiap city
        for city in self.cityList:
            #setiap kota print nama kota
            print(city, ":", self.cityList[city])


            # Print distances to neighboring cities
            for neighbor, distance in self.cityList[city].items():

                #print tetangga dan jarak
                print("    ->", neighbor, ":", distance)


    def tambahkanKota(self, kota):
        #jika kota tidak ada di cityList
        if kota not in self.cityList:
            #maka tambahkan kota
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        #jika kotaDihapus ada di cityList
        if kotaDihapus in self.cityList:
            # Remove the city from the city list
            del self.cityList[kotaDihapus]

            # Remove references to the deleted city from other cities
            for kota in self.cityList:
                #jika kotaDihapus ada di cityList[kota]
                if kotaDihapus in self.cityList[kota]:
                    #maka hapus kotaDihapus
                    del self.cityList[kota][kotaDihapus]
            return True
        return False


    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

    def dijkstra(self, source):
        distances = {}
        for city in self.cityList:
        # Initialize distances with infinity
            distances[city] = float('inf')
        distances[source] = 0
        print (distances)
        
        # Initialize list of unvisited cities
        unvisited_cities = []
        for city in self.cityList:
            unvisited_cities.append(city)
        #unvisited_cities = list(self.cityList.keys())
        print (unvisited_cities)
        
        while unvisited_cities:
            # Find the unvisited city with the smallest distance
            min_distance = float('inf')
            closest_city = None
            #mengiterasi setiap kota yang belum dikunjungi
            for city in unvisited_cities:
                #jika jarak kota lebih kecil dari min_distance
                if distances[city] < min_distance:
                    min_distance = distances[city]
                    closest_city = city
                    
            # Remove the closest city from unvisited list
            unvisited_cities.remove(closest_city)
            # Update distances to neighboring cities
            for neighbor, weight in self.cityList[closest_city].items():
                #jika jarak kota terdekat + weight lebih kecil dari jarak kota tetangga
                distance = distances[closest_city] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
        return distances
    
     def tsp(self):
        # Initialize variables
        shortest_distance = float('inf')
        shortest_path = []
        # Generate all permutations of cities
        cities = list(self.cityList.keys())
        for path in permutations(cities):
#
            # Calculate total distance for current permutation
            total_distance = 0
            for i in range(len(path) - 1):
                if path[i] in self.cityList and path[i + 1] in self.cityList[path[i]]:
                    total_distance += self.cityList[path[i]][path[i + 1]]
                else:
                    total_distance = float('inf')
             #
                    break  # Break if path is invalid
            #
            # Check if current permutation is shorter than the current shortest path
            if total_distance < shortest_distance:
                shortest_distance = total_distance
                shortest_path = path

        return shortest_path, shortest_distance
    
    #
# Example usage with Dijkstra's algorithm:
petamalang = WeightedGraph()
petamalang.tambahkanKota("wagir")
petamalang.tambahkanKota("tidaratas")
petamalang.tambahkanKota("singasari")
petamalang.tambahkanKota("malang")
petamalang.tambahkanKota("borobamban")
petamalang.tambahkanKota("kedungrejo")
petamalang.tambahkanKota("tamiajeng")
petamalang.tambahkanKota("toempang")
petamalang.tambahkanKota("gubukklakah")
petamalang.tambahkanKota("sugro")

petamalang.tambahkanJalan("wagir" , "tidaratas", 6.55)
petamalang.tambahkanJalan("tidaratas" , "singasari", 10.50)
petamalang.tambahkanJalan("singasari" , "malang", 9.12)
petamalang.tambahkanJalan("malang" , "borobamban", 7.37)
petamalang.tambahkanJalan("borobamban" ,"kedungrejo", 6.32)
petamalang.tambahkanJalan("kedungrejo" , "tamiajeng", 4.73)
petamalang.tambahkanJalan("tamiajeng" , "toempang", 5.31)
petamalang.tambahkanJalan("toempang" , "gubukklakah", 7.81)
petamalang.tambahkanJalan("gubukklakah" , "sugro", 12.97)
petamalang.tambahkanJalan("sugro" , "wagir", 28.11)
petamalang.tambahkanJalan("wagir" , "singasari", 15.51)
petamalang.tambahkanJalan("tidaratas" , "malang", 3.40)
petamalang.tambahkanJalan("singasari" , "borobamban", 6.15)
petamalang.tambahkanJalan("malang" , "kedungrejo", 11.06)
petamalang.tambahkanJalan("borobamban" , "tamiajeng", 7.13)
petamalang.tambahkanJalan("kedungrejo" , "toempang", 4.37)
petamalang.tambahkanJalan("tamiajeng" , "gubukklakah", 13.39)
petamalang.tambahkanJalan("toempang" , "sugro", 13.70)
petamalang.tambahkanJalan("gubukklakah" , "wagir", 26.05)
petamalang.tambahkanJalan("sugro" , "tidaratas", 26.17)

petamalang.printGraph()
shortest_distances = petamalang.dijkstra("wagir")
print("Shortest distances from Malang to other cities:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petamalang.tsp()
print("Shortest TSP path:", shortest_path)
print("Shortest TSP distance:", shortest_distance)
